{"version":3,"file":"static/js/382.32145ef0.chunk.js","mappings":"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","sources":["components/Forms/RegisterForm/ValidationRegister.js","components/Forms/RegisterForm/RegisterFormIcons.js","components/Forms/RegisterForm/RegisterForm.styled.js","components/Forms/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\nimport { t } from 'i18next';\n\nexport const validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .required(t('requried_name_field'))\n    .min(2, t('name_min'))\n    .max(26, t('name_max'))\n    .matches(/^([A-Za-zА-Яа-яЁёІіЇїЄєҐґ]+\\s?){2,26}$/, t('name_regexp')),\n  email: Yup.string()\n    .email(t('email_description'))\n    .required(t('requried_email_field'))\n    .matches(/^[a-zA-Z0-9._%+-]+@[a-z.-]+\\.[a-z]{2,}$/, t('email_regexp')),\n  password: Yup.string()\n    .required(t('requried_password_field'))\n    .min(6, t('password_min'))\n    .max(16, t('password_max'))\n    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/, t('password_regexp')),\n  confirmPassword: Yup.string().when('password', (password, schema) => {\n    return password\n      ? schema\n          .required(t('requried_confirm_pas_field'))\n          .oneOf([Yup.ref('password')], t('confirm_password_regexp'))\n      : schema.notRequired();\n  }),\n});\n","import svg from '../../../images/Icons/symbol-defs.svg';\n\nexport const IconSvgClose = () => {\n  return (\n    <svg width={24} height={24}>\n      <use\n        href={`${svg}#icon-close-eye`}\n        style={{\n          stroke: 'var(--main-clr-blue)',\n        }}\n        width={24}\n        height={24}\n      />\n    </svg>\n  );\n};\n\nexport const IconSvgOpen = () => {\n  return (\n    <svg width={24} height={24}>\n      <use\n        href={`${svg}#icon-eye`}\n        style={{\n          stroke: 'var(--main-clr-blue)',\n        }}\n        width={24}\n        height={24}\n      />\n    </svg>\n  );\n};\n\nexport const IconSvgSuccess = () => {\n  return (\n    <svg width={24} height={24}>\n      <use\n        href={`${svg}#icon-check`}\n        style={{\n          stroke: 'var(--menu-clr-green)',\n        }}\n        width={24}\n        height={24}\n      />\n    </svg>\n  );\n};","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const FormContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 40px;\n\n  flex-direction: column;\n  margin-left: auto;\n  margin-right: auto;\n  width: 280px;\n\n  border-radius: 20px;\n  background-color: var(--white-bckg-clr);\n\n  box-shadow: 3px 8px 14px 0px var(--small-shadow);\n\n  padding: 40px 12px;\n  @media screen and (min-width: 768px) {\n    width: 608px;\n    margin-top: 80px;\n    padding: 60px 75px;\n    border-radius: 40px;\n  }\n`;\n\nexport const FormInputWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n\n  &.error .form-input {\n    border-color: red;\n  }\n\n  @media screen and (min-width: 768px) {\n    gap: 32px;\n  }\n`;\n\nexport const FormHeader = styled.h2`\n  font-family: Manrope, sans-serif;\n  margin-bottom: 20px;\n  font-weight: 500;\n  font-size: 24px;\n  text-align: center;\n  line-height: normal;\n  font-style: normal;\n\n  color: var(--main-accent-text-clr);\n\n  @media screen and (min-width: 768px) {\n    margin-bottom: 40px;\n    font-size: 36px;\n    letter-spacing: 1.44px;\n  }\n`;\n\nexport const FormInput = styled.input`\n  padding-top: 12px;\n  padding-bottom: 12px;\n  padding-left: 16px;\n  padding-right: 85px;\n  width: 256px;\n  font-size: 16px;\n  align-items: center;\n  border: 1px solid var(--main-clr-blue);\n  border-radius: 40px;\n  line-height: 1.4;\n  font-style: normal;\n  outline: none;\n\n  &.input-error {\n    border: 1px solid var(--form-error-red);\n  }\n  &.input-success {\n    border: 1px solid var(--menu-clr-green);\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 458px;\n  }\n  &::placeholder {\n    font-family: Manrope, sans-serif;\n    font-weight: 400;\n    font-size: 14px;\n    letter-spacing: 0.64px;\n    color: var(--main-form-clr);\n\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n  }\n  }\n`;\n\nexport const FormInputNameEmail = styled.input`\n  padding-top: 12px;\n  padding-bottom: 12px;\n  padding-left: 16px;\n  padding-right: 60px;\n  width: 256px;\n  font-size: 16px;\n  align-items: center;\n  border: 1px solid var(--main-clr-blue);\n  border-radius: 40px;\n  line-height: 1.4;\n  font-style: normal;\n  outline: none;\n\n  &.input-error {\n    border: 1px solid var(--form-error-red);\n  }\n  &.input-success {\n    border: 1px solid var(--menu-clr-green);\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 458px;\n  }\n  &::placeholder {\n    font-family: Manrope, sans-serif;\n    font-weight: 400;\n    letter-spacing: 0.64px;\n    color: var(--main-form-clr);\n  }\n`;\n\nexport const FormButton = styled.button`\n  font-family: Manrope, sans-serif;\n  width: 100%;\n  font-weight: 600;\n  line-height: normal;\n  font-style: normal;\n  letter-spacing: 0.8px;\n  font-size: 20px;\n  color: var(--white-bckg-clr);\n  background-color: var(--main-clr-blue);\n  border: transparent;\n  margin-top: 40px;\n  margin-bottom: 8px;\n  padding: 10px 28px;\n  border-radius: 40px;\n\n  :hover,\n  :focus {\n    background: var(--main-clr-gr_blue);\n  }\n\n  @media screen and (min-width: 768px) {\n    margin-top: 52px;\n    margin-bottom: 16px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    margin-top: 40px;\n  }\n`;\nexport const FormText = styled.p`\n  text-align: center;\n  font-weight: 400;\n  font-size: 12px;\n  font-style: normal;\n  line-height: normal;\n  letter-spacing: 0.48px;\n  color: var(--main-form-clr);\n`;\n\nexport const FormLink = styled(Link)`\n  display: inline-block;\n  margin-left: 2px;\n\n  color: var(--main-clr-blue);\n`;\n\nexport const WrapperInput = styled.div`\n  position: relative;\n`;\n\nexport const ErrorText = styled.p`\n  position: absolute;\n  left: 16px;\n  top: 48px;\n  font-family: Manrope, sans-serif;\n  font-size: 8px;\n  font-weight: 400;\n  font-style: normal;\n  line-height: normal;\n  color: var(--form-error-red);\n\n  @media screen and (min-width: 768px) {\n    top: 50px;\n    font-size: 12px;\n  }\n`;\n\nexport const SuccessText = styled.p`\n  position: absolute;\n  left: 16px;\n  top: 48px;\n  font-family: Manrope, sans-serif;\n  font-size: 8px;\n  font-weight: 400;\n  font-style: normal;\n  line-height: normal;\n  color: var(--menu-clr-green);\n\n  @media screen and (min-width: 768px) {\n    top: 50px;\n    font-size: 12px;\n  }\n`;\n\nexport const IconForInput = styled.div`\n  display: flex;\n  gap: 12px;\n  position: absolute;\n  top: 50%;\n  right: 16px;\n  transform: translateY(-50%);\n`;\n","import { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFormik } from 'formik';\nimport { register } from 'redux/auth/authOperations';\nimport getMessage from 'utils/messages';\nimport { validationSchema } from './ValidationRegister';\nimport { IconSvgClose, IconSvgOpen,IconSvgSuccess  } from './RegisterFormIcons';\n\nimport svg from '../../../images/Icons/symbol-defs.svg';\n\nimport {\n  ErrorText,\n  FormButton,\n  FormContainer,\n  FormHeader,\n  FormInput,\n  FormInputNameEmail,\n  FormInputWrapper,\n  FormLink,\n  FormText,\n  IconForInput,\n  SuccessText,\n  WrapperInput,\n} from './RegisterForm.styled';\n\n\nconst RegisterForm = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  const [typeForPassword, setTypeForPassword] = useState('password');\n  const [typeForConfirmPassword, setTypeForConfirmPassword] =\n    useState('password');\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n    },\n\n    validationSchema: validationSchema,\n\n    onSubmit: async (values, { resetForm }) => {\n      const credentials = {\n        name: values.name,\n        email: values.email,\n        password: values.password,\n      };\n      try {\n        const response = await dispatch(register(credentials));\n        if (response.error) {\n          getMessage(response.error.data.message);\n        } else {\n          resetForm();\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    },\n  });\n\n  const handleNameBlur = () => {\n    formik.setTouched({ ...formik.touched, name: true });\n  };\n\n  const handleEmailBlur = () => {\n    formik.setTouched({ ...formik.touched, email: true });\n  };\n\n  const handlePasswordBlur = () => {\n    formik.setTouched({ ...formik.touched, password: true });\n  };\n\n  const handleConfirmPasswordBlur = () => {\n    formik.setTouched({ ...formik.touched, confirmPassword: true });\n  };\n  const showNameError =\n    (formik.touched.name || formik.submitCount > 0) &&\n    formik.errors.name &&\n    formik.values.name;\n\n  const showNameSuccess =\n    formik.touched.name && !formik.errors.name && formik.values.name;\n\n  const showEmailError =\n    (formik.touched.email || formik.submitCount > 0) &&\n    formik.errors.email &&\n    formik.values.email;\n\n  const showEmailSuccess =\n    formik.touched.email && !formik.errors.email && formik.values.email;\n\n  const showPasswordError =\n    (formik.touched.password || formik.submitCount > 0) &&\n    formik.errors.password &&\n    formik.values.password;\n\n  const showPasswordSuccess =\n    formik.touched.password &&\n    !formik.errors.password &&\n    formik.values.password;\n\n  const showConfirmPasswordError =\n    (formik.touched.confirmPassword || formik.submitCount > 0) &&\n    formik.errors.confirmPassword &&\n    formik.values.confirmPassword;\n\n  const showConfirmPasswordSuccess =\n    formik.touched.confirmPassword &&\n    !formik.errors.confirmPassword &&\n    formik.values.confirmPassword;\n\n  const handleClear = field => {\n    formik.setFieldValue(field, '');\n  };\n\n  return (\n    <FormContainer>\n      <form onSubmit={formik.handleSubmit}>\n        <FormHeader>{t('registration')}</FormHeader>\n        <FormInputWrapper>\n          <div>\n            <label htmlFor=\"name\" hidden>\n              Name\n            </label>\n            <WrapperInput>\n              <FormInputNameEmail\n                id=\"name\"\n                value={formik.values.name}\n                onChange={formik.handleChange}\n                name=\"name\"\n                placeholder={t('name')}\n                onBlur={handleNameBlur}\n                className={\n                  showNameError\n                    ? 'input-error'\n                    : showNameSuccess\n                    ? 'input-success'\n                    : ''\n                }\n              />\n              {formik.touched.name && formik.errors.name && (\n                <ErrorText>{formik.errors.name}</ErrorText>\n              )}\n              <IconForInput>\n                {showNameError && (\n                  <svg\n                    width={24}\n                    height={24}\n                    onClick={() => handleClear('name')}\n                  >\n                    <use\n                      href={`${svg}#icon-cross`}\n                      style={{\n                        stroke: 'var(--form-error-red)',\n                      }}\n                      width={24}\n                      height={24}\n                    />\n                  </svg>\n                )}\n                {showNameSuccess && <IconSvgSuccess />}\n              </IconForInput>\n            </WrapperInput>\n          </div>\n          <div>\n            <label htmlFor=\"email\" hidden>\n              Email\n            </label>\n            <WrapperInput>\n              <FormInputNameEmail\n                id=\"email\"\n                name=\"email\"\n                value={formik.values.email}\n                onChange={formik.handleChange}\n                placeholder={t('email')}\n                onBlur={handleEmailBlur}\n                className={\n                  showEmailError\n                    ? 'input-error'\n                    : showEmailSuccess\n                    ? 'input-success'\n                    : ''\n                }\n              />\n              {formik.touched.email && formik.errors.email && (\n                <ErrorText>{formik.errors.email}</ErrorText>\n              )}\n              <IconForInput>\n                {showEmailError && (\n                  <svg\n                    width={24}\n                    height={24}\n                    onClick={() => handleClear('email')}\n                  >\n                    <use\n                      href={`${svg}#icon-cross`}\n                      style={{\n                        stroke: 'var(--form-error-red)',\n                      }}\n                      width={24}\n                      height={24}\n                    />\n                  </svg>\n                )}\n                {showEmailSuccess && <IconSvgSuccess />}\n              </IconForInput>\n            </WrapperInput>\n          </div>\n          <div>\n            <label htmlFor=\"password\" hidden>\n              Password\n            </label>\n            <WrapperInput>\n              <FormInput\n                id=\"password\"\n                type={typeForPassword}\n                name=\"password\"\n                value={formik.values.password}\n                onChange={formik.handleChange}\n                placeholder={t('password')}\n                onBlur={handlePasswordBlur}\n                className={\n                  showPasswordError\n                    ? 'input-error'\n                    : showPasswordSuccess\n                    ? 'input-success'\n                    : ''\n                }\n              />\n              <IconForInput>\n                {typeForPassword === 'password' ? (\n                  <span onClick={() => setTypeForPassword('text')}>\n                    <IconSvgClose />\n                  </span>\n                ) : (\n                  <span onClick={() => setTypeForPassword('password')}>\n                    <IconSvgOpen />\n                  </span>\n                )}\n                {showPasswordError && (\n                  <svg\n                    width={24}\n                    height={24}\n                    onClick={() => handleClear('password')}\n                  >\n                    <use\n                      href={`${svg}#icon-cross`}\n                      style={{\n                        stroke: 'var(--form-error-red)',\n                      }}\n                      width={24}\n                      height={24}\n                    />\n                  </svg>\n                )}\n                {showPasswordSuccess && <IconSvgSuccess />}\n              </IconForInput>\n              {formik.touched.password && formik.errors.password && (\n                <ErrorText>{formik.errors.password}</ErrorText>\n              )}\n              {showPasswordSuccess && (\n                <SuccessText>{t('password_is_secure')}</SuccessText>\n              )}\n            </WrapperInput>\n          </div>\n          <div>\n            <label htmlFor=\"confirmPassword\" hidden>\n              Confirm password\n            </label>\n            <WrapperInput>\n              <FormInput\n                id=\"confirmPassword\"\n                type={typeForConfirmPassword}\n                name=\"confirmPassword\"\n                value={formik.values.confirmPassword}\n                onChange={formik.handleChange}\n                placeholder={t('confirm_password')}\n                onBlur={handleConfirmPasswordBlur}\n                className={\n                  showConfirmPasswordError\n                    ? 'input-error'\n                    : showConfirmPasswordSuccess\n                    ? 'input-success'\n                    : ''\n                }\n              />\n              <IconForInput>\n                {typeForConfirmPassword === 'password' ? (\n                  <span onClick={() => setTypeForConfirmPassword('text')}>\n                    <IconSvgClose />\n                  </span>\n                ) : (\n                  <span onClick={() => setTypeForConfirmPassword('password')}>\n                    <IconSvgOpen />\n                  </span>\n                )}\n                {showConfirmPasswordError && (\n                  <svg\n                    width={24}\n                    height={24}\n                    onClick={() => handleClear('confirmPassword')}\n                  >\n                    <use\n                      href={`${svg}#icon-cross`}\n                      style={{\n                        stroke: 'var(--form-error-red)',\n                      }}\n                      width={24}\n                      height={24}\n                    />\n                  </svg>\n                )}\n                {showConfirmPasswordSuccess && <IconSvgSuccess />}\n              </IconForInput>\n              {formik.touched.confirmPassword &&\n                formik.errors.confirmPassword && (\n                  <ErrorText>{formik.errors.confirmPassword}</ErrorText>\n                )}\n            </WrapperInput>\n          </div>\n        </FormInputWrapper>\n        <FormButton type=\"submit\">{t('registration')}</FormButton>\n        <FormText>\n          {t('registration_form_text')}\n          <FormLink to=\"/login\">{t('login_form')}</FormLink>\n        </FormText>\n      </form>\n    </FormContainer>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/Forms/RegisterForm/RegisterForm';\nimport LoaderPaws from 'components/Loader/LoaderPaws';\nimport { useAuth } from 'redux/auth/selectors';\n\nconst RegisterPage = () => {\n  const { isLoading } = useAuth();\n\n  return isLoading ? (\n    <LoaderPaws/>\n  ) : (<RegisterForm />);\n};\n\nexport default RegisterPage;\n"],"names":["validationSchema","Yup","shape","name","required","t","min","max","matches","email","password","confirmPassword","when","schema","oneOf","notRequired","IconSvgClose","_jsx","width","height","children","href","concat","svg","style","stroke","IconSvgOpen","IconSvgSuccess","FormContainer","styled","div","_templateObject","_taggedTemplateLiteral","FormInputWrapper","_templateObject2","FormHeader","h2","_templateObject3","FormInput","input","_templateObject4","FormInputNameEmail","_templateObject5","FormButton","button","_templateObject6","FormText","p","_templateObject7","FormLink","Link","_templateObject8","WrapperInput","_templateObject9","ErrorText","_templateObject10","SuccessText","_templateObject11","IconForInput","_templateObject12","useTranslation","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","typeForPassword","setTypeForPassword","_useState3","_useState4","typeForConfirmPassword","setTypeForConfirmPassword","formik","useFormik","initialValues","onSubmit","_onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","_ref","resetForm","credentials","response","wrap","_context","prev","next","register","sent","error","getMessage","data","message","t0","console","stop","_x","_x2","apply","arguments","showNameError","touched","submitCount","errors","showNameSuccess","showEmailError","showEmailSuccess","showPasswordError","showPasswordSuccess","showConfirmPasswordError","showConfirmPasswordSuccess","handleClear","field","setFieldValue","_jsxs","handleSubmit","htmlFor","hidden","id","value","onChange","handleChange","placeholder","onBlur","setTouched","_objectSpread","className","onClick","type","to","useAuth","isLoading","LoaderPaws","RegisterForm"],"sourceRoot":""}