{"version":3,"file":"static/js/382.acd8f1e0.chunk.js","mappings":"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","sources":["components/Forms/LoginForm/LoginForm.styled.js","const/Regex.js","components/Forms/RegisterForm/ValidationRegister.js","components/Forms/RegisterForm/RegisterFormIcons.js","components/Forms/RegisterForm/RegisterForm.styled.js","components/Forms/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { FcGoogle } from 'react-icons/fc';\n\n\nexport const FormContainer = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 40px;\nmargin-bottom: 80px;\n  flex-direction: column;\n  margin-left: auto;\n  margin-right: auto;\n  width: 280px;\n\n  border-radius: 20px;\n  background-color: var(--white-bckg-clr);\n\n  box-shadow: 7px 4px 14px rgba(136, 198, 253, 0.19);\n\n  padding: 40px 12px;\n  @media screen and (min-width: 768px) {\n    width: 608px;\n    margin-top: 80px;\n    margin-bottom: 100px;\n\n    padding: 60px 75px;\n    border-radius: 40px;\n  }  \n  `;\n\nexport const GoogleIcon = styled(FcGoogle)`\ndisplay: block;\nwidth: 36px;\nheight: 36px;\n&:hover{\n  transform: scale(1.3);\n}\n`\n\nexport const GoogleAuth = styled.a`\ndisplay: flex;\ngap: 8px;\n  font-family: Manrope, sans-serif;\n  text-decoration: none;\n  font-weight: 400;\n  line-height: normal;\n  font-style: normal;\n  letter-spacing: 0.8px;\n  font-size: 16px;\n  color: var(--white-bckg-clr);\n  background-color: var(--main-clr-blue);\n  border: transparent;\n  margin-bottom: 8px;\n  padding: 10px 28px;\n  border-radius: 40px;\n  text-align: left;\n  align-items: center;\n  :hover {\n    background: var(--main-clr-gr_blue);\n    &:hover {\n    ${GoogleIcon} {\n      transform: scale(1.3); \n    }\n  }\n  }\n\n  @media screen and (min-width: 768px) {\n    margin-bottom: 16px;\n  }\n\n  @media screen and (min-width: 1280px) {\n  }\n`\n\nexport const FormInputEmail = styled.input`\n  box-sizing: border-box;\n  outline: none;\n  display: flex;\n  margin-bottom: 14px;\n  width: 256px;\n  line-height: 1.4;\n  padding: 12px 60px 12px 16px;\n  border: 1px var(--main-clr-blue) solid;\n  border-radius: 40px;\n\n  @media screen and (min-width: 768px) {\n    width: 458px;\n    margin-bottom: 32px;\n  }\n  &::placeholder {\n    font-family: Manrope, sans-serif;\n    font-weight: 400;\n    letter-spacing: 0.64px;\n    font-size: 16px;\n  }\n  &.input-error {\n    border-color: red;\n  }\n  &.input-success {\n    border-color: green;\n  }\n  :-webkit-autofill {\n    -webkit-box-shadow: 0 0 0 1000px white inset;\n    box-shadow: 0 0 0 1000px white inset;\n  }\n`;\n\nexport const FormInput = styled.input`\n  box-sizing: border-box;\n  outline: none;\n  display: flex;\n  margin-bottom: 14px;\n  width: 256px;\n  line-height: 1.4;\n  padding: 12px 85px 12px 16px;\n  border: 1px var(--main-clr-blue) solid;\n  border-radius: 40px;\n\n  @media screen and (min-width: 768px) {\n    width: 458px;\n    margin-bottom: 32px;\n  }\n  &::placeholder {\n    font-family: Manrope, sans-serif;\n    font-weight: 400;\n    letter-spacing: 0.64px;\n    font-size: 16px;\n  }\n  &.input-error {\n    border-color: red;\n  }\n  &.input-success {\n    border-color: green;\n  }\n  :-webkit-autofill {\n    -webkit-box-shadow: 0 0 0 1000px white inset;\n    box-shadow: 0 0 0 1000px white inset;\n  }\n`;\n\nexport const FormHeader = styled.h2`\n  font-family: Manrope, sans-serif;\n  margin-bottom: 20px;\n  font-weight: 500;\n  font-size: 24px;\n  text-align: center;\n  line-height: normal;\n  font-style: normal;\n\n  color: var(--main-accent-text-clr);\n\n  @media screen and (min-width: 768px) {\n    margin-bottom: 40px;\n    font-size: 36px;\n    letter-spacing: 1.44px;\n  }\n`;\n\nexport const FormText = styled.p`\n  text-align: center;\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 16px;\n  letter-spacing: 0.04em;\n  color: var(--main-form-clr);\n`;\n\nexport const FormLink = styled(Link)`\n  display: inline-block;\n  margin-left: 2px;\n\n  color: var(--main-clr-blue);\n`;\n\nexport const FormButton = styled.button`\n  font-family: Manrope, sans-serif;\n  width: 100%;\n  font-weight: 600;\n  line-height: normal;\n  font-style: normal;\n  letter-spacing: 0.8px;\n  font-size: 20px;\n  color: var(--white-bckg-clr);\n  background-color: var(--main-clr-blue);\n  border: transparent;\n  margin-top: 40px;\n  margin-bottom: 8px;\n  padding: 10px 28px;\n  border-radius: 40px;\n\n  :hover,\n  :focus {\n    background: var(--main-clr-gr_blue);\n  }\n\n  @media screen and (min-width: 768px) {\n    margin-top: 52px;\n    margin-bottom: 16px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    margin-top: 40px;\n  }\n`;\n\nexport const PasswordDiv = styled.div`\n  position: relative;\n`;\n\nexport const EmailDiv = styled.div`\n  position: relative;\n`;\n\nexport const FormErrorPassword = styled.p`\n  position: absolute;\n  font-size: 8px;\n  color: var(--red-form-clr);\n  top: 48px;\n  left: 16px;\n\n  @media screen and (min-width: 768px) {\n    font-size: 12px;\n  }\n`;\n\nexport const FormErrorEmail = styled.p`\n  font-size: 8px;\n  position: absolute;\n  color: var(--red-form-clr);\n  top: 48px;\n  left: 16px;\n\n  @media screen and (min-width: 768px) {\n    font-size: 12px;\n  }\n`;\n\nexport const FormSuccessPassword = styled.p`\n  font-size: 8px;\n  position: absolute;\n  color: var(--green-form-clr);\n  top: 48px;\n  left: 16px;\n\n  @media screen and (min-width: 768px) {\n    font-size: 12px;\n  }\n`;\n\nexport const IconsContainer = styled.div`\n  position: absolute;\n  display: flex;\n \n  gap: 12px;\n  top: 50%;\n  right: 16px;\n  transform: translateY(-50%);\n`;\n\nexport const EmailIcon = styled.div`\n  position: absolute;\n  top: 50%;\n  right: 16px;\n  transform: translateY(-50%);\n\n`;\n","export const nameRegex =\n  /^([A-ZА-ЯЁІЇЄҐ'][A-Za-zА-Яа-яЁёІіЇїЄєҐґ']+\\s?){1,26}$|^([A-ZА-ЯЁІЇЄҐ'][a-zA-Zа-яА-ЯЁёІіЇїЄєҐґ'\\s]*(?:-[A-ZА-ЯЁІЇЄҐ'][a-zA-Zа-яА-ЯЁёІіЇїЄєҐґ'\\s]*)){1,26}$/;\nexport const cityRegex =\n  /^[A-ZА-ЯЁІЇЄҐ][a-zA-Zа-яА-ЯЁёІіЇїЄєҐґ]*$|^[A-ZА-ЯЁІЇЄҐ][a-zA-Zа-яА-ЯЁёІіЇїЄєҐґ\\s]*[A-ZА-ЯЁІЇЄҐ][a-zA-Zа-яА-ЯЁёІіЇїЄєҐґ\\s]*$|^[A-ZА-ЯЁІЇЄҐ][a-zA-Zа-яА-ЯЁёІіЇїЄєҐґ\\s]*(?:-[A-ZА-ЯЁІЇЄҐ][a-zA-Zа-яА-ЯЁёІіЇїЄєҐґ\\s]*)$|^[A-ZА-ЯЁІЇЄҐ][a-zA-Zа-яА-ЯЁёІіЇїЄєҐґ\\s]*(?:-\\s*[A-ZА-ЯЁІЇЄҐ][a-zA-Zа-яА-ЯЁёІіЇїЄєҐґ\\s]*)*(?:,\\s*[A-ZА-ЯЁІЇЄҐ][a-zA-Zа-яА-ЯЁёІіЇїЄєҐґ\\s]*)$|^[A-ZА-ЯЁІЇЄҐ][a-zA-Zа-яА-ЯЁёІіЇїЄєҐґ\\s-]*(?:,\\s[A-ZА-ЯЁІЇЄҐ][a-zA-Zа-яА-ЯЁёІіЇїЄєҐґ\\s-]*)[A-ZА-ЯЁІЇЄҐ][a-zA-Zа-яА-ЯЁёІіЇїЄєҐґ\\s]*$/;\nexport const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-z.-]+\\.[a-z]{2,}$/;\nexport const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/;\nexport const phoneRegex = /^\\+380\\d{9}$/;\nexport const birthdayRegex = /^(0[1-9]|[12]\\d|3[01])-(0[1-9]|1[0-2])-\\d{4}$/;\n","import * as Yup from 'yup';\nimport { t } from 'i18next';\nimport { emailRegex, nameRegex, passwordRegex } from 'const/Regex';\n\nexport const validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .required(t('requried_name_field'))\n    .min(2, t('name_min'))\n    .max(26, t('name_max'))\n    .matches(nameRegex, t('name_regexp')),\n  email: Yup.string()\n    .email(t('email_description'))\n    .required(t('requried_email_field'))\n    .matches(emailRegex, t('email_regexp')),\n  password: Yup.string()\n    .required(t('requried_password_field'))\n    .min(6, t('password_min'))\n    .max(16, t('password_max'))\n    .matches(passwordRegex, t('password_regexp')),\n  confirmPassword: Yup.string().when('password', (password, schema) => {\n    return password\n      ? schema\n          .required(t('requried_confirm_pas_field'))\n          .oneOf([Yup.ref('password')], t('confirm_password_regexp'))\n      : schema.notRequired();\n  }),\n});\n","import svg from '../../../images/Icons/symbol-defs.svg';\n\nexport const IconSvgClose = () => {\n  return (\n    <svg width={24} height={24}>\n      <use\n        href={`${svg}#icon-close-eye`}\n        style={{\n          stroke: 'var(--main-clr-blue)',\n        }}\n        width={24}\n        height={24}\n      />\n    </svg>\n  );\n};\n\nexport const IconSvgOpen = () => {\n  return (\n    <svg width={24} height={24}>\n      <use\n        href={`${svg}#icon-eye`}\n        style={{\n          stroke: 'var(--main-clr-blue)',\n        }}\n        width={24}\n        height={24}\n      />\n    </svg>\n  );\n};\n\nexport const IconSvgSuccess = () => {\n  return (\n    <svg width={24} height={24}>\n      <use\n        href={`${svg}#icon-check`}\n        style={{\n          stroke: 'var(--menu-clr-green)',\n        }}\n        width={24}\n        height={24}\n      />\n    </svg>\n  );\n};","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const FormContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 40px;\n  margin-bottom: 40px;\n  flex-direction: column;\n  margin-left: auto;\n  margin-right: auto;\n  width: 280px;\n\n  border-radius: 20px;\n  background-color: var(--white-bckg-clr);\n\n  box-shadow: 3px 8px 14px 0px var(--small-shadow);\n\n  padding: 40px 12px;\n  @media screen and (min-width: 768px) {\n    width: 608px;\n    margin-top: 80px;\n    margin-bottom: 80px;\n    padding: 60px 75px;\n    border-radius: 40px;\n  }\n`;\n\nexport const FormInputWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n\n  &.error .form-input {\n    border-color: red;\n  }\n\n  @media screen and (min-width: 768px) {\n    gap: 32px;\n  }\n`;\n\nexport const FormHeader = styled.h2`\n  font-family: Manrope, sans-serif;\n  margin-bottom: 20px;\n  font-weight: 500;\n  font-size: 24px;\n  text-align: center;\n  line-height: normal;\n  font-style: normal;\n\n  color: var(--main-accent-text-clr);\n\n  @media screen and (min-width: 768px) {\n    margin-bottom: 40px;\n    font-size: 36px;\n    letter-spacing: 1.44px;\n  }\n`;\n\nexport const FormInput = styled.input`\n  padding-top: 12px;\n  padding-bottom: 12px;\n  padding-left: 16px;\n  padding-right: 85px;\n  width: 256px;\n  font-size: 16px;\n  align-items: center;\n  border: 1px solid var(--main-clr-blue);\n  border-radius: 40px;\n  line-height: 1.4;\n  font-style: normal;\n  outline: none;\n\n  &.input-error {\n    border: 1px solid var(--form-error-red);\n  }\n  &.input-success {\n    border: 1px solid var(--menu-clr-green);\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 458px;\n  }\n  &::placeholder {\n    font-family: Manrope, sans-serif;\n    font-weight: 400;\n    font-size: 14px;\n    letter-spacing: 0.64px;\n    color: var(--main-form-clr);\n\n    @media screen and (min-width: 768px) {\n      font-size: 16px;\n    }\n  }\n`;\n\nexport const FormInputNameEmail = styled.input`\n  padding-top: 12px;\n  padding-bottom: 12px;\n  padding-left: 16px;\n  padding-right: 60px;\n  width: 256px;\n  font-size: 16px;\n  align-items: center;\n  border: 1px solid var(--main-clr-blue);\n  border-radius: 40px;\n  line-height: 1.4;\n  font-style: normal;\n  outline: none;\n\n  &.input-error {\n    border: 1px solid var(--form-error-red);\n  }\n  &.input-success {\n    border: 1px solid var(--menu-clr-green);\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 458px;\n  }\n  &::placeholder {\n    font-family: Manrope, sans-serif;\n    font-weight: 400;\n    letter-spacing: 0.64px;\n    color: var(--main-form-clr);\n  }\n`;\n\nexport const FormButton = styled.button`\n  font-family: Manrope, sans-serif;\n  width: 100%;\n  font-weight: 600;\n  line-height: normal;\n  font-style: normal;\n  letter-spacing: 0.8px;\n  font-size: 20px;\n  color: var(--white-bckg-clr);\n  background-color: var(--main-clr-blue);\n  border: transparent;\n  margin-top: 40px;\n  margin-bottom: 8px;\n  padding: 10px 28px;\n  border-radius: 40px;\n\n  :hover,\n  :focus {\n    background: var(--main-clr-gr_blue);\n  }\n\n  @media screen and (min-width: 768px) {\n    margin-top: 52px;\n    margin-bottom: 16px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    margin-top: 40px;\n  }\n`;\nexport const FormText = styled.p`\n  text-align: center;\n  font-weight: 400;\n  font-size: 12px;\n  font-style: normal;\n  line-height: normal;\n  letter-spacing: 0.48px;\n  color: var(--main-form-clr);\n`;\n\nexport const FormLink = styled(Link)`\n  display: inline-block;\n  margin-left: 2px;\n\n  color: var(--main-clr-blue);\n`;\n\nexport const WrapperInput = styled.div`\n  position: relative;\n`;\n\nexport const ErrorText = styled.p`\n  position: absolute;\n  left: 16px;\n  top: 48px;\n  font-family: Manrope, sans-serif;\n  font-size: 7px;\n  font-weight: 400;\n  font-style: normal;\n  line-height: normal;\n  color: var(--form-error-red);\n\n  @media screen and (min-width: 768px) {\n    top: 50px;\n    font-size: 12px;\n  }\n`;\n\nexport const SuccessText = styled.p`\n  position: absolute;\n  left: 16px;\n  top: 48px;\n  font-family: Manrope, sans-serif;\n  font-size: 7px;\n  font-weight: 400;\n  font-style: normal;\n  line-height: normal;\n  color: var(--menu-clr-green);\n\n  @media screen and (min-width: 768px) {\n    top: 50px;\n    font-size: 12px;\n  }\n`;\n\nexport const IconForInput = styled.div`\n  display: flex;\n  gap: 12px;\n  position: absolute;\n  top: 50%;\n  right: 16px;\n  transform: translateY(-50%);\n`;\n","import { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useFormik } from 'formik';\nimport { register } from 'redux/auth/authOperations';\nimport getMessage from 'utils/messages';\nimport { validationSchema } from './ValidationRegister';\nimport { IconSvgClose, IconSvgOpen, IconSvgSuccess } from './RegisterFormIcons';\n\nimport svg from '../../../images/Icons/symbol-defs.svg';\n\nimport {\n  ErrorText,\n  FormButton,\n  FormContainer,\n  FormHeader,\n  FormInput,\n  FormInputNameEmail,\n  FormInputWrapper,\n  FormLink,\n  FormText,\n  IconForInput,\n  SuccessText,\n  WrapperInput,\n} from './RegisterForm.styled';\nimport { GoogleAuth, GoogleIcon } from '../LoginForm/LoginForm.styled';\n\nconst googleAuthUrl =\n  'https://final-project-backend-4o0r.onrender.com/api/users/google';\n\nconst RegisterForm = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n\n  const [typeForPassword, setTypeForPassword] = useState('password');\n  const [typeForConfirmPassword, setTypeForConfirmPassword] =\n    useState('password');\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n    },\n\n    validationSchema: validationSchema,\n\n    onSubmit: async (values, { resetForm }) => {\n      const credentials = {\n        name: values.name,\n        email: values.email,\n        password: values.password,\n      };\n      try {\n        const response = await dispatch(register(credentials));\n        if (response.error) {\n          getMessage(response.error.data.message);\n        } else {\n          resetForm();\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    },\n  });\n\n  const handleNameBlur = () => {\n    formik.setTouched({ ...formik.touched, name: true });\n  };\n\n  const handleEmailBlur = () => {\n    formik.setTouched({ ...formik.touched, email: true });\n  };\n\n  const handlePasswordBlur = () => {\n    formik.setTouched({ ...formik.touched, password: true });\n  };\n\n  const handleConfirmPasswordBlur = () => {\n    formik.setTouched({ ...formik.touched, confirmPassword: true });\n  };\n  const showNameError =\n    (formik.touched.name || formik.submitCount > 0) &&\n    formik.errors.name &&\n    formik.values.name;\n\n  const showNameSuccess =\n    formik.touched.name && !formik.errors.name && formik.values.name;\n\n  const showEmailError =\n    (formik.touched.email || formik.submitCount > 0) &&\n    formik.errors.email &&\n    formik.values.email;\n\n  const showEmailSuccess =\n    formik.touched.email && !formik.errors.email && formik.values.email;\n\n  const showPasswordError =\n    (formik.touched.password || formik.submitCount > 0) &&\n    formik.errors.password &&\n    formik.values.password;\n\n  const showPasswordSuccess =\n    formik.touched.password &&\n    !formik.errors.password &&\n    formik.values.password;\n\n  const showConfirmPasswordError =\n    (formik.touched.confirmPassword || formik.submitCount > 0) &&\n    formik.errors.confirmPassword &&\n    formik.values.confirmPassword;\n\n  const showConfirmPasswordSuccess =\n    formik.touched.confirmPassword &&\n    !formik.errors.confirmPassword &&\n    formik.values.confirmPassword;\n\n  const handleClear = field => {\n    formik.setFieldValue(field, '');\n  };\n\n  return (\n    <FormContainer>\n      <FormHeader>{t('registration')}</FormHeader>\n      <div>\n        <GoogleAuth href={`${googleAuthUrl}`} type=\"button\">\n          <GoogleIcon />\n          {t('googleAuth')}\n        </GoogleAuth>\n      </div>\n      <form onSubmit={formik.handleSubmit}>\n        <FormInputWrapper>\n          <div>\n            <label htmlFor=\"name\" hidden>\n              Name\n            </label>\n            <WrapperInput>\n              <FormInputNameEmail\n                id=\"name\"\n                value={formik.values.name}\n                onChange={formik.handleChange}\n                name=\"name\"\n                placeholder={t('name')}\n                onBlur={handleNameBlur}\n                className={\n                  showNameError\n                    ? 'input-error'\n                    : showNameSuccess\n                    ? 'input-success'\n                    : ''\n                }\n              />\n              {formik.touched.name && formik.errors.name && (\n                <ErrorText>{formik.errors.name}</ErrorText>\n              )}\n              <IconForInput>\n                {showNameError && (\n                  <svg\n                    width={24}\n                    height={24}\n                    onClick={() => handleClear('name')}\n                  >\n                    <use\n                      href={`${svg}#icon-cross`}\n                      style={{\n                        stroke: 'var(--form-error-red)',\n                      }}\n                      width={24}\n                      height={24}\n                    />\n                  </svg>\n                )}\n                {showNameSuccess && <IconSvgSuccess />}\n              </IconForInput>\n            </WrapperInput>\n          </div>\n          <div>\n            <label htmlFor=\"email\" hidden>\n              Email\n            </label>\n            <WrapperInput>\n              <FormInputNameEmail\n                id=\"email\"\n                name=\"email\"\n                value={formik.values.email}\n                onChange={formik.handleChange}\n                placeholder={t('email')}\n                onBlur={handleEmailBlur}\n                className={\n                  showEmailError\n                    ? 'input-error'\n                    : showEmailSuccess\n                    ? 'input-success'\n                    : ''\n                }\n              />\n              {formik.touched.email && formik.errors.email && (\n                <ErrorText>{formik.errors.email}</ErrorText>\n              )}\n              <IconForInput>\n                {showEmailError && (\n                  <svg\n                    width={24}\n                    height={24}\n                    onClick={() => handleClear('email')}\n                  >\n                    <use\n                      href={`${svg}#icon-cross`}\n                      style={{\n                        stroke: 'var(--form-error-red)',\n                      }}\n                      width={24}\n                      height={24}\n                    />\n                  </svg>\n                )}\n                {showEmailSuccess && <IconSvgSuccess />}\n              </IconForInput>\n            </WrapperInput>\n          </div>\n          <div>\n            <label htmlFor=\"password\" hidden>\n              Password\n            </label>\n            <WrapperInput>\n              <FormInput\n                id=\"password\"\n                type={typeForPassword}\n                name=\"password\"\n                value={formik.values.password}\n                onChange={formik.handleChange}\n                placeholder={t('password')}\n                onBlur={handlePasswordBlur}\n                className={\n                  showPasswordError\n                    ? 'input-error'\n                    : showPasswordSuccess\n                    ? 'input-success'\n                    : ''\n                }\n              />\n              <IconForInput>\n                {typeForPassword === 'password' ? (\n                  <span onClick={() => setTypeForPassword('text')}>\n                    <IconSvgClose />\n                  </span>\n                ) : (\n                  <span onClick={() => setTypeForPassword('password')}>\n                    <IconSvgOpen />\n                  </span>\n                )}\n                {showPasswordError && (\n                  <svg\n                    width={24}\n                    height={24}\n                    onClick={() => handleClear('password')}\n                  >\n                    <use\n                      href={`${svg}#icon-cross`}\n                      style={{\n                        stroke: 'var(--form-error-red)',\n                      }}\n                      width={24}\n                      height={24}\n                    />\n                  </svg>\n                )}\n                {showPasswordSuccess && <IconSvgSuccess />}\n              </IconForInput>\n              {formik.touched.password && formik.errors.password && (\n                <ErrorText>{formik.errors.password}</ErrorText>\n              )}\n              {showPasswordSuccess && (\n                <SuccessText>{t('password_is_secure')}</SuccessText>\n              )}\n            </WrapperInput>\n          </div>\n          <div>\n            <label htmlFor=\"confirmPassword\" hidden>\n              Confirm password\n            </label>\n            <WrapperInput>\n              <FormInput\n                id=\"confirmPassword\"\n                type={typeForConfirmPassword}\n                name=\"confirmPassword\"\n                value={formik.values.confirmPassword}\n                onChange={formik.handleChange}\n                placeholder={t('confirm_password')}\n                onBlur={handleConfirmPasswordBlur}\n                className={\n                  showConfirmPasswordError\n                    ? 'input-error'\n                    : showConfirmPasswordSuccess\n                    ? 'input-success'\n                    : ''\n                }\n              />\n              <IconForInput>\n                {typeForConfirmPassword === 'password' ? (\n                  <span onClick={() => setTypeForConfirmPassword('text')}>\n                    <IconSvgClose />\n                  </span>\n                ) : (\n                  <span onClick={() => setTypeForConfirmPassword('password')}>\n                    <IconSvgOpen />\n                  </span>\n                )}\n                {showConfirmPasswordError && (\n                  <svg\n                    width={24}\n                    height={24}\n                    onClick={() => handleClear('confirmPassword')}\n                  >\n                    <use\n                      href={`${svg}#icon-cross`}\n                      style={{\n                        stroke: 'var(--form-error-red)',\n                      }}\n                      width={24}\n                      height={24}\n                    />\n                  </svg>\n                )}\n                {showConfirmPasswordSuccess && <IconSvgSuccess />}\n              </IconForInput>\n              {formik.touched.confirmPassword &&\n                formik.errors.confirmPassword && (\n                  <ErrorText>{formik.errors.confirmPassword}</ErrorText>\n                )}\n            </WrapperInput>\n          </div>\n        </FormInputWrapper>\n        <FormButton type=\"submit\">{t('registration')}</FormButton>\n        <FormText>\n          {t('registration_form_text')}\n          <FormLink to=\"/login\">{t('login_form')}</FormLink>\n        </FormText>\n      </form>\n    </FormContainer>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/Forms/RegisterForm/RegisterForm';\n\nconst RegisterPage = () => {\n  return <RegisterForm />;\n};\n\nexport default RegisterPage;\n"],"names":["FormContainer","styled","div","_templateObject","_taggedTemplateLiteral","GoogleIcon","FcGoogle","_templateObject2","GoogleAuth","a","_templateObject3","FormInputEmail","input","_templateObject4","FormInput","_templateObject5","FormHeader","h2","_templateObject6","FormText","p","_templateObject7","FormLink","Link","_templateObject8","FormButton","button","_templateObject9","PasswordDiv","_templateObject10","EmailDiv","_templateObject11","FormErrorPassword","_templateObject12","FormErrorEmail","_templateObject13","FormSuccessPassword","_templateObject14","IconsContainer","_templateObject15","EmailIcon","_templateObject16","nameRegex","cityRegex","emailRegex","passwordRegex","phoneRegex","validationSchema","Yup","shape","name","required","t","min","max","matches","email","password","confirmPassword","when","schema","oneOf","notRequired","IconSvgClose","_jsx","width","height","children","href","concat","svg","style","stroke","IconSvgOpen","IconSvgSuccess","FormInputWrapper","FormInputNameEmail","WrapperInput","ErrorText","SuccessText","IconForInput","useTranslation","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","typeForPassword","setTypeForPassword","_useState3","_useState4","typeForConfirmPassword","setTypeForConfirmPassword","formik","useFormik","initialValues","onSubmit","_onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","_ref","resetForm","credentials","response","wrap","_context","prev","next","register","sent","error","getMessage","data","message","t0","console","stop","_x","_x2","apply","arguments","showNameError","touched","submitCount","errors","showNameSuccess","showEmailError","showEmailSuccess","showPasswordError","showPasswordSuccess","showConfirmPasswordError","showConfirmPasswordSuccess","handleClear","field","setFieldValue","_jsxs","type","handleSubmit","htmlFor","hidden","id","value","onChange","handleChange","placeholder","onBlur","setTouched","_objectSpread","className","onClick","to","RegisterForm"],"sourceRoot":""}