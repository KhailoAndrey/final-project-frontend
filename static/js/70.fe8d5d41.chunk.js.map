{"version":3,"file":"static/js/70.fe8d5d41.chunk.js","mappings":"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","sources":["components/Forms/LoginForm/LoginForm.styled.js","components/Forms/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const FormContainer = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 40px;\n\n  flex-direction: column;\n  margin-left: auto;\n  margin-right: auto;\n  width: 280px;\n\n  border-radius: 40px;\n  background-color: var(--white-bckg-clr);\n\n  box-shadow: 7px 4px 14px rgba(136, 198, 253, 0.19);\n\n  padding: 40px 12px;\n  @media screen and (min-width: 768px) {\n    width: 608px;\n    margin-top: 80px;\n    padding: 60px 75px;\n  }\n`;\n\nexport const FormInputEmail = styled.input`\n  box-sizing: border-box;\n  outline: none;\n  display: flex;\n  margin-bottom: 14px;\n  width: 256px;\n  padding: 12px 60px 12px 16px;\n  border: 1px var(--main-clr-blue) solid;\n  border-radius: 40px;\n\n  @media screen and (min-width: 768px) {\n    width: 458px;\n    margin-bottom: 32px;\n  }\n  &::placeholder {\n    font-family: Manrope, sans-serif;\n    font-weight: 400;\n    letter-spacing: 0.64px;\n    font-size: 16px;\n  }\n  &.input-error {\n    border-color: red;\n  }\n  &.input-success {\n    border-color: green;\n  }\n  :-webkit-autofill {\n    -webkit-box-shadow: 0 0 0 1000px white inset;\n    box-shadow: 0 0 0 1000px white inset;\n  }\n`;\n\nexport const FormInput = styled.input`\n  box-sizing: border-box;\n  outline: none;\n  display: flex;\n  margin-bottom: 14px;\n  width: 256px;\n  padding: 12px 85px 12px 16px;\n  border: 1px var(--main-clr-blue) solid;\n  border-radius: 40px;\n\n  @media screen and (min-width: 768px) {\n    width: 458px;\n    margin-bottom: 32px;\n  }\n  &::placeholder {\n    font-family: Manrope, sans-serif;\n    font-weight: 400;\n    letter-spacing: 0.64px;\n    font-size: 16px;\n  }\n  &.input-error {\n    border-color: red;\n  }\n  &.input-success {\n    border-color: green;\n  }\n  :-webkit-autofill {\n    -webkit-box-shadow: 0 0 0 1000px white inset;\n    box-shadow: 0 0 0 1000px white inset;\n  }\n`;\n\nexport const FormHeader = styled.h2`\n  font-family: Manrope, sans-serif;\n  margin-bottom: 20px;\n  font-weight: 500;\n  font-size: 24px;\n  text-align: center;\n  line-height: normal;\n  font-style: normal;\n\n  color: var(--main-accent-text-clr);\n\n  @media screen and (min-width: 768px) {\n    margin-bottom: 40px;\n    font-size: 36px;\n    letter-spacing: 1.44px;\n  }\n`;\n\nexport const FormText = styled.p`\n  text-align: center;\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 16px;\n  letter-spacing: 0.04em;\n  color: var(--main-form-clr);\n`;\n\nexport const FormLink = styled(Link)`\n  display: inline-block;\n  margin-left: 2px;\n\n  color: var(--main-clr-blue);\n`;\n\nexport const FormButton = styled.button`\n  font-family: Manrope, sans-serif;\n  width: 100%;\n  font-weight: 600;\n  line-height: normal;\n  font-style: normal;\n  letter-spacing: 0.8px;\n  font-size: 20px;\n  color: var(--white-bckg-clr);\n  background-color: var(--main-clr-blue);\n  border: transparent;\n  margin-top: 40px;\n  margin-bottom: 8px;\n  padding: 10px 28px;\n  border-radius: 40px;\n\n  :hover,\n  :focus {\n    background: var(--main-clr-gr_blue);\n  }\n\n  @media screen and (min-width: 768px) {\n    margin-top: 52px;\n    margin-bottom: 16px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    margin-top: 40px;\n  }\n`;\n\nexport const PasswordDiv = styled.div`\n  position: relative;\n`;\n\nexport const EmailDiv = styled.div`\n  position: relative;\n`;\n\nexport const FormErrorPassword = styled.p`\n  position: absolute;\n  font-size: 9px;\n  color: var(--red-form-clr);\n  top: 44px;\n  left: 16px;\n\n  @media screen and (min-width: 768px) {\n    font-size: 12px;\n  }\n`;\n\nexport const FormErrorEmail = styled.p`\n  font-size: 9px;\n  position: absolute;\n  color: var(--red-form-clr);\n  top: 44px;\n  left: 16px;\n\n  @media screen and (min-width: 768px) {\n    font-size: 12px;\n  }\n`;\n\nexport const FormSuccessPassword = styled.p`\n  font-size: 9px;\n  position: absolute;\n  color: var(--green-form-clr);\n  top: 44px;\n  left: 16px;\n\n  @media screen and (min-width: 768px) {\n    font-size: 12px;\n  }\n`;\n\nexport const IconsContainer = styled.div`\n  position: absolute;\n  display: flex;\n \n  gap: 12px;\n  top: 50%;\n  right: 16px;\n  transform: translateY(-50%);\n`;\n\nexport const EmailIcon = styled.div`\n  position: absolute;\n  top: 50%;\n  right: 16px;\n  transform: translateY(-50%);\n\n`;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { t } from 'i18next';\nimport svg from '../../../images/Icons/symbol-defs.svg';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { logIn } from 'redux/auth/authOperations';\nimport {\n  FormContainer,\n  FormInput,\n  FormInputEmail,\n  FormHeader,\n  FormText,\n  FormLink,\n  FormButton,\n  FormErrorPassword,\n  FormErrorEmail,\n  PasswordDiv,\n  EmailDiv,\n  FormSuccessPassword,\n  IconsContainer,\n  EmailIcon,\n} from './LoginForm.styled';\n\nconst emailRegexp = /^[a-zA-Z0-9._%+-]+@[a-z.-]+.[a-z]{2,}$/;\nconst passwordRegexp = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/;\n\nconst validationSchema = Yup.object({\n  email: Yup.string()\n    .email(t('email_registered'))\n    .required(t('requried_email_field'))\n    .matches(emailRegexp, t('email_regexp')),\n  password: Yup.string()\n    .trim()\n    .required(t('requried_password_field'))\n    .min(6, t('password_min'))\n    .max(16, t('password_max'))\n    .matches(passwordRegexp, t('password_regexp')),\n});\n\nexport const LoginForm = () => {\n  const { t } = useTranslation();\n  const [type, setType] = useState('password');\n  const dispatch = useDispatch();\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: validationSchema,\n    onSubmit: async values => {\n      dispatch(\n        logIn({\n          email: values.email,\n          password: values.password,\n        })\n      );\n      formik.resetForm();\n    },\n  });\n\n  const handlePasswordBlur = () => {\n    formik.setTouched({ ...formik.touched, password: true });\n  };\n\n  const handleEmailBlur = () => {\n    formik.setTouched({ ...formik.touched, email: true });\n  };\n\n  const showEmailError =\n    (formik.touched.email || formik.submitCount > 0) &&\n    formik.errors.email &&\n    formik.values.email;\n\n  const showPasswordError =\n    (formik.touched.password || formik.submitCount > 0) &&\n    formik.errors.password &&\n    formik.values.password;\n\n  const showPasswordSuccess =\n    formik.touched.password &&\n    !formik.errors.password &&\n    formik.values.password;\n\n  const showEmailSuccess =\n    formik.touched.email && !formik.errors.email && formik.values.email;\n\n  const handleClear = field => {\n    formik.setFieldValue(field, '');\n  };\n  return (\n    <FormContainer>\n      <FormHeader>{t('login_form')}</FormHeader>\n      <form onSubmit={formik.handleSubmit}>\n        <EmailDiv>\n          <FormInputEmail\n            id=\"email\"\n            name=\"email\"\n            value={formik.values.email}\n            onChange={formik.handleChange}\n            placeholder={t('email')}\n            onBlur={handleEmailBlur}\n            className={\n              showEmailError\n                ? 'input-error'\n                : showEmailSuccess\n                ? 'input-success'\n                : ''\n            }\n          />\n          {formik.touched.email && formik.errors.email && (\n            <FormErrorEmail>{formik.errors.email}</FormErrorEmail>\n          )}\n          {showEmailError && (\n            <EmailIcon>\n              <svg width={24} height={24} onClick={() => handleClear('email')}>\n                <use\n                  href={`${svg}#icon-cross`}\n                  width={24}\n                  height={24}\n                  style={{ stroke: 'var( --red-form-clr)' }}\n                />\n              </svg>\n            </EmailIcon>\n          )}\n          {showEmailSuccess && (\n            <EmailIcon>\n              <svg width={24} height={24}>\n                <use\n                  href={`${svg}#icon-check`}\n                  width={24}\n                  height={24}\n                  style={{ stroke: 'var( --green-form-clr)' }}\n                />\n              </svg>\n            </EmailIcon>\n          )}\n        </EmailDiv>\n        <PasswordDiv>\n          <FormInput\n            id=\"password\"\n            name=\"password\"\n            type={type}\n            autoComplete=\"password\"\n            value={formik.values.password}\n            onChange={formik.handleChange}\n            placeholder={t('password')}\n            onBlur={handlePasswordBlur}\n            className={\n              showPasswordError\n                ? 'input-error'\n                : showPasswordSuccess\n                ? 'input-success'\n                : ''\n            }\n          />\n          <IconsContainer>\n            {type === 'password' ? (\n              <span onClick={() => setType('text')}>\n                <svg width={24} height={24}>\n                  <use\n                    href={`${svg}#icon-close-eye`}\n                    width={24}\n                    height={24}\n                    style={{ stroke: 'var( --main-clr-blue)' }}\n                  />\n                </svg>\n              </span>\n            ) : (\n              <span onClick={() => setType('password')}>\n                <svg width={24} height={24}>\n                  <use\n                    href={`${svg}#icon-eye`}\n                    width={24}\n                    height={24}\n                    style={{ stroke: 'var( --main-clr-blue)' }}\n                  />\n                </svg>\n              </span>\n            )}\n            {showPasswordError && (\n              <svg\n                width={24}\n                height={24}\n                onClick={() => handleClear('password')}\n              >\n                <use\n                  href={`${svg}#icon-cross`}\n                  width={24}\n                  height={24}\n                  style={{ stroke: 'var( --red-form-clr)' }}\n                />\n              </svg>\n            )}\n\n            {showPasswordSuccess && (\n              <svg width={24} height={24}>\n                <use\n                  href={`${svg}#icon-check`}\n                  width={24}\n                  height={24}\n                  style={{ stroke: 'var( --green-form-clr)' }}\n                />\n              </svg>\n            )}\n          </IconsContainer>\n\n          {formik.touched.password && formik.errors.password && (\n            <FormErrorPassword>{formik.errors.password}</FormErrorPassword>\n          )}\n          {showPasswordSuccess && (\n            <FormSuccessPassword>{t('password_is_secure')}</FormSuccessPassword>\n          )}\n        </PasswordDiv>\n\n        <FormButton type=\"submit\">{t('login_form')}</FormButton>\n        <FormText>\n          {t('login_form_text')}\n          <FormLink to=\"/register\">{t('registration')}</FormLink>\n        </FormText>\n      </form>\n    </FormContainer>\n  );\n};\n","import { LoginForm } from \"components/Forms/LoginForm/LoginForm\";\n\nconst LoginPage = () => {\n  return <LoginForm/>;\n};\n\nexport default LoginPage;\n"],"names":["FormContainer","styled","div","_templateObject","_taggedTemplateLiteral","FormInputEmail","input","_templateObject2","FormInput","_templateObject3","FormHeader","h2","_templateObject4","FormText","p","_templateObject5","FormLink","Link","_templateObject6","FormButton","button","_templateObject7","PasswordDiv","_templateObject8","EmailDiv","_templateObject9","FormErrorPassword","_templateObject10","FormErrorEmail","_templateObject11","FormSuccessPassword","_templateObject12","IconsContainer","_templateObject13","EmailIcon","_templateObject14","validationSchema","Yup","email","t","required","matches","password","trim","min","max","LoginForm","useTranslation","_useState","useState","_useState2","_slicedToArray","type","setType","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","_onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","wrap","_context","prev","next","logIn","resetForm","stop","_x","apply","arguments","showEmailError","touched","submitCount","errors","showPasswordError","showPasswordSuccess","showEmailSuccess","handleClear","field","setFieldValue","_jsxs","children","_jsx","handleSubmit","id","name","value","onChange","handleChange","placeholder","onBlur","setTouched","_objectSpread","className","width","height","onClick","href","concat","svg","style","stroke","autoComplete","to"],"sourceRoot":""}