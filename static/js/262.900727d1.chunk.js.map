{"version":3,"file":"static/js/262.900727d1.chunk.js","mappings":"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","sources":["components/Forms/RegisterForm/ValidationRegister.js","components/Forms/RegisterForm/RegisterForm.styled.js","components/Forms/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\n\nexport const validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .required('Name is a required field')\n    .min(2, 'Name must be at least 2 characters')\n    .max(16, 'Name must be at least 16 characters')\n    .matches(/^[A-Za-z]{2,16}$/, 'The name must be in English'),\n  email: Yup.string()\n    .email()\n    .required('Email is a required field')\n    .matches(/^\\w+([.-]?\\w+)@\\w+([.-]?\\w+)(.\\w{2,3})+$/, 'Enter a valid Email'),\n  password: Yup.string()\n    .required('Password is a required field')\n    .min(6, 'Password must be at least 6 characters')\n    .max(16, 'Password must be no more than 16 characters')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\n      'Must be at least one number, one lowercase and an uppercase letter'\n    ),\n  confirmPassword: Yup.string().when('password', (password, schema) => {\n    return password\n      ? schema\n          .required('Password confirmation required')\n          .oneOf([Yup.ref('password')], 'Passwords must match')\n      : schema.notRequired();\n  }),\n});\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { Field } from 'formik';\n\nexport const FormContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 40px;\n\n  flex-direction: column;\n  margin-left: auto;\n  margin-right: auto;\n  width: 280px;\n\n  border-radius: 20px;\n  background-color: var(--white-bckg-clr);\n\n  box-shadow: 3px 8px 14px 0px var(--small-shadow);\n\n  padding: 40px 12px;\n  @media screen and (min-width: 768px) {\n    width: 608px;\n    margin-top: 80px;\n    padding: 60px 75px;\n    border-radius: 40px;\n  }\n`;\n\nexport const FormInputWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n\n  @media screen and (min-width: 768px) {\n    gap: 32px;\n  }\n`;\n\nexport const FormHeader = styled.h2`\n  font-family: Manrope, sans-serif;\n  margin-bottom: 20px;\n  font-weight: 500;\n  font-size: 24px;\n  text-align: center;\n  line-height: normal;\n  font-style: normal;\n\n  color: var(--main-accent-text-clr);\n\n  @media screen and (min-width: 768px) {\n    margin-bottom: 40px;\n    font-size: 36px;\n    letter-spacing: 1.44px;\n  }\n`;\n\nexport const FormInput = styled(Field)`\n  /* display: flex; */\n  padding: 12px 16px;\n  width: 256px;\n  font-size: 16px;\n  align-items: center;\n  border: 1px solid var(--main-clr-blue);\n  border-radius: 40px;\n  line-height: 1.4;\n  font-style: normal;\n  @media screen and (min-width: 768px) {\n    width: 458px;\n  }\n  &::placeholder {\n    font-family: Manrope, sans-serif;\n    font-weight: 400;\n    letter-spacing: 0.64px;\n    color: var(--main-form-clr);\n  }\n`;\n\nexport const FormButton = styled.button`\n  font-family: Manrope, sans-serif;\n  width: 100%;\n  font-weight: 600;\n  line-height: normal;\n  font-style: normal;\n  letter-spacing: 0.8px;\n  font-size: 20px;\n  color: var(--white-bckg-clr);\n  background-color: var(--main-clr-blue);\n  border: transparent;\n  margin-top: 40px;\n  margin-bottom: 8px;\n  padding: 10px 28px;\n  border-radius: 40px;\n\n  :hover,\n  :focus {\n    background: var(--main-clr-gr_blue);\n  }\n\n  @media screen and (min-width: 768px) {\n    margin-top: 52px;\n    margin-bottom: 16px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    margin-top: 40px;\n  }\n`;\nexport const FormText = styled.p`\n  text-align: center;\n  font-weight: 400;\n  font-size: 12px;\n  font-style: normal;\n  line-height: normal;\n  letter-spacing: 0.48px;\n  color: var(--main-form-clr);\n`;\n\nexport const FormLink = styled(Link)`\n  display: inline-block;\n  margin-left: 2px;\n\n  color: var(--main-clr-blue);\n`;\n\nexport const WrapperInput = styled.div`\n  position: relative;\n`;\n\nexport const ErrorText = styled.p`\n  position: absolute;\n  left: 16px;\n  top: 50px;\n  font-family: Manrope, sans-serif;\n  font-size: 12px;\n  font-weight: 400;\n  font-style: normal;\n  line-height: normal;\n  color: var(--form-error-red);\n`;\n","import { useDispatch } from 'react-redux';\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport { validationSchema } from './ValidationRegister';\nimport { register } from 'redux/auth/authOperations';\nimport {\n  ErrorText,\n  FormButton,\n  FormContainer,\n  FormHeader,\n  FormInput,\n  FormInputWrapper,\n  FormLink,\n  FormText,\n  WrapperInput,\n} from './RegisterForm.styled';\n\nimport Notiflix from 'notiflix';\n\nNotiflix.Notify.init({\n  width: '280px',\n  position: 'center-top',\n  distance: '15px',\n  timeout: 5000,\n  opacity: 1,\n  warning: {\n    background: 'var(--main-clr-blue)',\n    textColor: 'var(--main-accent-text-clr)',\n    notiflixIconColor: 'var(--main-clr-yellow)',\n  },\n});\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n  confirmPassword: '',\n};\n\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n};\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (values, { resetForm }) => {\n    const credentials = {\n      name: values.name,\n      email: values.email,\n      password: values.password,\n    };\n    try {\n      // console.log(credentials);\n      const response = await dispatch(register(credentials));\n      if (response.error) {\n        Notiflix.Notify.warning(`${response.error.data.message}`);\n      } else {\n        resetForm();\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <FormContainer>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n      >\n        <Form>\n          <FormHeader>Registration</FormHeader>\n          <FormInputWrapper>\n            <div>\n              <label htmlFor=\"name\" hidden>\n                Name\n              </label>\n              <WrapperInput>\n                <FormInput\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Name\"\n                ></FormInput>\n                <FormError name=\"name\" />\n              </WrapperInput>\n            </div>\n            <div>\n              <label htmlFor=\"email\" hidden>\n                Email\n              </label>\n              <WrapperInput>\n                <FormInput\n                  type=\"email\"\n                  name=\"email\"\n                  id=\"email\"\n                  placeholder=\"Email\"\n                ></FormInput>\n                <FormError name=\"email\" />\n              </WrapperInput>\n            </div>\n            <div>\n              <label htmlFor=\"password\" hidden>\n                Password\n              </label>\n              <WrapperInput>\n                <FormInput\n                  type=\"password\"\n                  name=\"password\"\n                  id=\"password\"\n                  placeholder=\"Password\"\n                ></FormInput>\n                <FormError name=\"password\" />\n              </WrapperInput>\n            </div>\n            <div>\n              <label htmlFor=\"confirmPassword\" hidden>\n                Confirm password\n              </label>\n              <WrapperInput>\n                <FormInput\n                  type=\"password\"\n                  name=\"confirmPassword\"\n                  id=\"confirmPassword\"\n                  placeholder=\"Confirm password\"\n                ></FormInput>\n                <FormError name=\"confirmPassword\" />\n              </WrapperInput>\n            </div>\n          </FormInputWrapper>\n          <FormButton type=\"submit\">Registration</FormButton>\n          <FormText>\n            Already have an account?\n            <FormLink to=\"/login\">Login</FormLink>\n          </FormText>\n        </Form>\n      </Formik>\n    </FormContainer>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/Forms/RegisterForm/RegisterForm';\n\nconst RegisterPage = () => {\n  return <RegisterForm />;\n};\n\nexport default RegisterPage;\n"],"names":["validationSchema","Yup","shape","name","required","min","max","matches","email","password","confirmPassword","when","schema","oneOf","notRequired","FormContainer","styled","div","_templateObject","_taggedTemplateLiteral","FormInputWrapper","_templateObject2","FormHeader","h2","_templateObject3","FormInput","Field","_templateObject4","FormButton","button","_templateObject5","FormText","p","_templateObject6","FormLink","Link","_templateObject7","WrapperInput","_templateObject8","ErrorText","_templateObject9","Notiflix","init","width","position","distance","timeout","opacity","warning","background","textColor","notiflixIconColor","initialValues","FormError","_ref","_jsx","ErrorMessage","render","message","children","dispatch","useDispatch","handleSubmit","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","_ref2","resetForm","credentials","response","wrap","_context","prev","next","register","sent","error","concat","data","t0","console","stop","_x","_x2","apply","arguments","Formik","onSubmit","_jsxs","Form","htmlFor","hidden","type","placeholder","id","to","RegisterForm"],"sourceRoot":""}